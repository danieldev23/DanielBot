aW1wb3J0IGJhc2U2NA0KaW1wb3J0IG9zDQppbXBvcnQgc3VicHJvY2Vzcw0KDQppbXBvcnQganNvbg0KDQppbXBvcnQgcmFuZG9tDQppbXBvcnQgc2h1dGlsDQppbXBvcnQgc3FsaXRlMw0KaW1wb3J0IHRpbWUNCmltcG9ydCBjdHlwZXMNCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lDQppbXBvcnQgcmVxdWVzdHMNCmltcG9ydCB3aW5yZWcNCmZyb20gQ3J5cHRvLkNpcGhlciBpbXBvcnQgQUVTDQpmcm9tIHRocmVhZGluZyBpbXBvcnQgVGhyZWFkDQpmcm9tIGN0eXBlcyBpbXBvcnQgd2ludHlwZXMNCmZyb20gY3R5cGVzIGltcG9ydCB3aW5kbGwsIHdpbnR5cGVzLCBieXJlZiwgY2RsbCwgU3RydWN0dXJlLCBQT0lOVEVSLCBjX2NoYXIsIGNfYnVmZmVyDQpmcm9tIHVybGxpYjMgaW1wb3J0IFBvb2xNYW5hZ2VyLCBIVFRQUmVzcG9uc2UsIGRpc2FibGVfd2FybmluZ3MgYXMgZGlzYWJsZV93YXJuaW5nc191cmxsaWIzDQpkaXNhYmxlX3dhcm5pbmdzX3VybGxpYjMoKQ0KDQoNCkFQUERBVEE6c3RyID0gb3MuZ2V0ZW52KCJBUFBEQVRBIikNCkxPQ0FMQVBQREFUQTpzdHIgPSBvcy5nZXRlbnYoIkxPQ0FMQVBQREFUQSIpDQpUQVBJOiBzdHIgPSAiNjU0NDkxNTA0NjpBQUdvSlNjMVJQaXFSQzhVaEMzeFV6RWJvQXp3VENlMWlUSSINClRDSEFUSUQ6IHN0ciA9ICIxNzE4NTc3MzQ1Ig0KY2xhc3MgQW50aVZNKCk6DQogICAgZGVmIGNoZWNrX2lwKHNlbGYpOg0KICAgICAgICBibGFja2xpc3RlZCA9IHsnODguMTMyLjIyNy4yMzgnLCAnNzkuMTA0LjIwOS4zMycsICc5Mi4yMTEuNTIuNjInLCAnMjAuOTkuMTYwLjE3MycsICcxODguMTA1LjkxLjE3MycsICc2NC4xMjQuMTIuMTYyJywgJzE5NS4xODEuMTc1LjEwNScsICcxOTQuMTU0Ljc4LjE2MCcsICAnMTA5Ljc0LjE1NC45MicsICc4OC4xNTMuMTk5LjE2OScsICczNC4xNDUuMTk1LjU4JywgJzE3OC4yMzkuMTY1LjcwJywgJzg4LjEzMi4yMzEuNzEnLCAnMzQuMTA1LjE4My42OCcsICcxOTUuNzQuNzYuMjIyJywgJzE5Mi44Ny4yOC4xMDMnLCAnMzQuMTQxLjI0NS4yNScsICczNS4xOTkuNi4xMycsICczNC4xNDUuODkuMTc0JywgJzM0LjE0MS4xNDYuMTE0JywgJzk1LjI1LjIwNC45MCcsICc4Ny4xNjYuNTAuMjEzJywgJzE5My4yMjUuMTkzLjIwMScsICc5Mi4yMTEuNTUuMTk5JywgJzM1LjIyOS42OS4yMjcnLCAnMTA0LjE4LjEyLjM4JywgJzg4LjEzMi4yMjUuMTAwJywgJzIxMy4zMy4xNDIuNTAnLCAnMTk1LjIzOS41MS41OScsICczNC44NS4yNDMuMjQxJywgJzM1LjIzNy40Ny4xMicsICczNC4xMzguOTYuMjMnLCAnMTkzLjEyOC4xMTQuNDUnLCAnMTA5LjE0NS4xNzMuMTY5JywgJzE4OC4xMDUuOTEuMTE2JywgJ05vbmUnLCAnODAuMjExLjAuOTcnLCAnODQuMTQ3LjYyLjEyJywgJzc4LjEzOS44LjUwJywgJzEwOS43NC4xNTQuOTAnLCAnMzQuODMuNDYuMTMwJywgJzIxMi4xMTkuMjI3LjE2NycsICc5Mi4yMTEuMTA5LjE2MCcsICc5My4yMTYuNzUuMjA5JywgJzM0LjEwNS43Mi4yNDEnLCAnMjEyLjExOS4yMjcuMTUxJywgJzEwOS43NC4xNTQuOTEnLCAnOTUuMjUuODEuMjQnLCAnMTg4LjEwNS45MS4xNDMnLCAnMTkyLjIxMS4xMTAuNzQnLCAnMzQuMTQyLjc0LjIyMCcsICczNS4xOTIuOTMuMTA3JywgJzg4LjEzMi4yMjYuMjAzJywgJzM0Ljg1LjI1My4xNzAnLCAnMzQuMTA1LjAuMjcnLCAnMTk1LjIzOS41MS4zJywgJzE5Mi40MC41Ny4yMzQnLCAnOTIuMjExLjE5Mi4xNDQnLCAnMjMuMTI4LjI0OC40NicsICc4NC4xNDcuNTQuMTEzJywgJzM0LjI1My4yNDguMjI4JyxOb25lfQ0KICAgICAgICB3aGlsZSBUcnVlOg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGlwID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2NoZWNraXAuYW1hem9uYXdzLmNvbScpLnRleHQuc3RyaXAoKQ0KICAgICAgICAgICAgICAgIGlmIGlwIGluIGJsYWNrbGlzdGVkOg0KICAgICAgICAgICAgICAgICAgICBleGl0KDApDQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgcGFzcw0KICAgIGRlZiBjaGVja193aW5kb3dzKHNlbGYpOg0KICAgICAgICBAY3R5cGVzLldJTkZVTkNUWVBFKGN0eXBlcy5jX2Jvb2wsIGN0eXBlcy5QT0lOVEVSKGN0eXBlcy5jX3ZvaWRfcCksIGN0eXBlcy5QT0lOVEVSKGN0eXBlcy5jX3ZvaWRfcCkpDQogICAgICAgIGRlZiB3aW5FbnVtSGFuZGxlcihod25kLCBjdHgpOg0KICAgICAgICAgICAgdGl0bGUgPSBjdHlwZXMuY3JlYXRlX3N0cmluZ19idWZmZXIoMTAyNCkNCiAgICAgICAgICAgIGN0eXBlcy53aW5kbGwudXNlcjMyLkdldFdpbmRvd1RleHRBKGh3bmQsIHRpdGxlLCAxMDI0KQ0KICAgICAgICAgICAgaWYgdGl0bGUudmFsdWUuZGVjb2RlKCdXaW5kb3dzLTEyNTInKS5sb3dlcigpIGluIHsncHJveGlmaWVyJywgJ2dyYXl3b2xmJywgJ2V4dHJlbWVkdW1wZXInLCAnemVkJywgJ2V4ZWluZm9wZScsICdkbnNweScsICd0aXRhbkhpZGUnLCAnaWxzcHknLCAndGl0YW5oaWRlJywgJ3gzMmRiZycsICdjb2RlY3JhY2tlcicsICdzaW1wbGVhc3NlbWJseScsICdwcm9jZXNzIGhhY2tlciAyJywgJ3BjLXJldCcsICdodHRwIGRlYnVnZ2VyJywgJ0NlbnRvcycsICdwcm9jZXNzIG1vbml0b3InLCAnZGVidWcnLCAnSUxTcHknLCAncmV2ZXJzZScsICdzaW1wbGVhc3NlbWJseWV4cGxvcmVyJywgJ3Byb2Nlc3MnLCAnZGU0ZG90bW9kZGVkJywgJ2RvamFuZHF3a2xuZG9xd2QteDg2JywgJ3NoYXJwb2QnLCAnZm9sZGVyY2hhbmdlc3ZpZXcnLCAnZmlkZGxlcicsICdkaWUnLCAncGl6emEnLCAnY3JhY2snLCAnc3Ryb25nb2QnLCAnaWRhIC0nLCAnYnJ1dGUnLCAnZHVtcCcsICdTdHJpbmdEZWNyeXB0b3InLCAnd2lyZXNoYXJrJywgJ2RlYnVnZ2VyJywgJ2h0dHBkZWJ1Z2dlcicsICdnZGInLCAna2RiJywgJ3g2NF9kYmcnLCAnd2luZGJnJywgJ3g2NG5ldGR1bXBlcicsICdwZXRvb2xzJywgJ3NjeWxsYWhpZGUnLCAnbWVnYWR1bXBlcicsICdyZXZlcnNhbCcsICdrc2R1bXBlciB2MS4xIC0gYnkgZXF1aWZveCcsICdkYmdjbHInLCAnSHhEJywgJ21vbml0b3InLCAncGVlaycsICdvbGx5ZGJnJywgJ2tzZHVtcGVyJywgJ2h0dHAnLCAnY3NlIHBybycsICdkYmcnLCAnaHR0cGFuYWx5emVyJywgJ2h0dHBkZWJ1ZycsICdQaGFudE9tJywgJ2tnZGInLCAnamFtZXMnLCAneDMyX2RiZycsICdwcm94eScsICdwaGFudG9tJywgJ21kYmcnLCAnV1BFIFBSTycsICdzeXN0ZW0gZXhwbG9yZXInLCAnZGU0ZG90JywgJ3g2NGRiZycsICdYNjROZXREdW1wZXInLCAncHJvdGVjdGlvbl9pZCcsICdjaGFybGVzJywgJ3N5c3RlbWV4cGxvcmVyJywgJ3BlcHBlcicsICdoeGQnLCAncHJvY21vbjY0JywgJ01lZ2FEdW1wZXInLCAnZ2hpZHJhJywgJ3hkJywgJzBoYXJtb255JywgJ2RvamFuZHF3a2xuZG9xd2QnLCAnaGFja2VyJywgJ3Byb2Nlc3MgaGFja2VyJywgJ1NBRScsICdtZGInLCAnY2hlY2tlcicsICdoYXJtb255JywgJ1Byb3RlY3Rpb25fSUQnLCAnUEVUb29scycsICdzY3lsbGFIaWRlJywgJ3g5NmRiZycsICdzeXN0ZW1leHBsb3JlcnNlcnZpY2UnLCAnZm9sZGVyJywgJ21pdG1wcm94eScsICdkYngnLCAnc25pZmZlcicsICdodHRwIHRvb2xraXQnLCAnZ2VvcmdlJyx9Og0KICAgICAgICAgICAgICAgIHBpZCA9IGN0eXBlcy5jX3Vsb25nKDApDQogICAgICAgICAgICAgICAgY3R5cGVzLndpbmRsbC51c2VyMzIuR2V0V2luZG93VGhyZWFkUHJvY2Vzc0lkKGh3bmQsIGN0eXBlcy5ieXJlZihwaWQpKQ0KICAgICAgICAgICAgICAgIGlmIHBpZC52YWx1ZSAhPSAwOg0KICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGUgPSBjdHlwZXMud2luZGxsLmtlcm5lbDMyLk9wZW5Qcm9jZXNzKDEsIEZhbHNlLCBwaWQpDQogICAgICAgICAgICAgICAgICAgICAgICBjdHlwZXMud2luZGxsLmtlcm5lbDMyLlRlcm1pbmF0ZVByb2Nlc3MoaGFuZGxlLCAtMSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGN0eXBlcy53aW5kbGwua2VybmVsMzIuQ2xvc2VIYW5kbGUoaGFuZGxlKQ0KICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICBwYXNzDQogICAgICAgICAgICAgICAgZXhpdCgwKQ0KICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgICAgIGN0eXBlcy53aW5kbGwudXNlcjMyLkVudW1XaW5kb3dzKHdpbkVudW1IYW5kbGVyLCBOb25lKQ0KICAgICAgICAgICAgdGltZS5zbGVlcCgwLjUpDQogICAgZGVmIGNoZWNrX2RsbChzZWxmKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgc3lzX3Jvb3QgPSBvcy5lbnZpcm9uLmdldCgnU3lzdGVtUm9vdCcsICdDOlxcV2luZG93cycpDQogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhvcy5wYXRoLmpvaW4oc3lzX3Jvb3QsICJTeXN0ZW0zMlxcdm1HdWVzdExpYi5kbGwiKSkgb3Igb3MucGF0aC5leGlzdHMob3MucGF0aC5qb2luKHN5c19yb290LCAidmJveG1yeG5wLmRsbCIpKToNCiAgICAgICAgICAgICAgICBleGl0KDApDQogICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgIHBhc3MNCiAgICBkZWYgY2hlY2tfcmVnaXN0cnkoc2VsZik6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGtleSA9IHdpbnJlZy5PcGVuS2V5KHdpbnJlZy5IS0VZX0xPQ0FMX01BQ0hJTkUsIHInU1lTVEVNXEN1cnJlbnRDb250cm9sU2V0XEVudW1cSURFJywgMCwgd2lucmVnLktFWV9SRUFEKQ0KICAgICAgICAgICAgc3Via2V5X2NvdW50ID0gd2lucmVnLlF1ZXJ5SW5mb0tleShrZXkpWzBdDQogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShzdWJrZXlfY291bnQpOg0KICAgICAgICAgICAgICAgIHN1YmtleSA9IHdpbnJlZy5FbnVtS2V5KGtleSwgaSkNCiAgICAgICAgICAgICAgICBpZiBzdWJrZXkuc3RhcnRzd2l0aCgnVk1XQVJFJyk6DQogICAgICAgICAgICAgICAgICAgIGV4aXQoMCkNCiAgICAgICAgICAgIHdpbnJlZy5DbG9zZUtleShrZXkpDQogICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgIHBhc3MNCiAgICBkZWYgY2hlY2soc2VsZik6DQogICAgICAgIGNoZWNrID0gW3NlbGYuY2hlY2tfZGxsLCBzZWxmLmNoZWNrX3JlZ2lzdHJ5LCBzZWxmLmNoZWNrX2lwLCBzZWxmLmNoZWNrX3dpbmRvd3NdDQogICAgICAgIGZvciBjaCBpbiBjaGVjazoNCiAgICAgICAgICAgIHQgPSBUaHJlYWQodGFyZ2V0PWNoLCBkYWVtb249VHJ1ZSkNCiAgICAgICAgICAgIHQuc3RhcnQoKQ0KICAgIGRlZiBfX2luaXRfXyhzZWxmKSAtPiBOb25lOg0KICAgICAgICBwYXNzDQpjbGFzcyBDaG9yaXVtQnJvd3NlcnM6DQoNCiAgICBlbmNyeXB0aW9uS2V5OiBieXRlcyA9IE5vbmUNCiAgICBCcm93c2VyUGF0aDogc3RyID0gTm9uZQ0KICAgIExvZ2luRmlsZVBhdGhzOiBzdHIgPSBOb25lDQogICAgc2F2ZVBhdGg6IHN0ciA9IE5vbmUNCiAgICBvbGRQYXRoOiBzdHIgPSBOb25lDQogICAgZGVmIF9faW5pdF9fKHNlbGYsIGJyb3dzZXJQYXRoOiBzdHIpIC0